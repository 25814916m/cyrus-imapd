-*- text -*-

		       Cyrus IMAP server design

* Introduction

This document describes the preliminary design of the Cyrus IMAP
server.  The Cyrus IMAP server will provide access to mail and bboards
through the IMAP protocol.  It differs from other IMAP server
implementations in that it is intended to be run on "sealed" servers,
where normal users are not normally permitted to log in.  It will
support extensions to allow administrative functions such as ACL's and
quota control and will cooperate with the Cyrus IMSP server.

The server can be compiled with or without Kerberos support.

* Mailbox/Bboard namespace

The Cyrus IMAP server presents folders using the "netnews" namespace
convention.  Folder names match in a case-insensitive manner.
Non-ASCII characters, shell metacharacters, and "/" are not permitted
in folder names.  A folder name may not start or end with a "."
character, nor may it contain two "." characters in a row.

* IMAP protocol extensions and implementation decisions

The Cyrus IMAP server supports the following protocol extensions:

	QUOTA (STORAGE only)
	ACL
	partitions on CREATE
	DUMP/RESTORE		[to be defined]

The CHECK command will scan for flags that have changed since the
client was notified about them, issuing unsolicited FETCH replies to
update the client's state.

The EXPUNGE operation is allowed at any time, even when other server
processes are reading the folder.  To avoid sending unsolicited
EXPUNGE replies at inopportune times, servers keep an open file handle
on the folder header files that are replaced by the EXPUNGE operation.
The server may send unsolicited EXPUNGE commands during the execution
of the APPEND, CHECK, and EXPUNGE commands.

The PURGE command is implemented as a NOOP.  The server always acts as
if PURGE ALWAYS is in effect.


* Mailbox/Bboard storage format

It is presumed that users will only be able to access folders
(mailboxes and bboards) through the use of network protocols.  The
Cyrus server implementation is given the freedom to store folders on
disk in a format best suited to its needs.

Each folder is represented by a directory in the filesystem.  Within
the directory, each message is stored in its own file in RFC 822
format.  The filenames of the message files are sequentially-assigned
internal numbers, with a period appended.  Once a message is appended
to a folder, its internal sequence number never changes.  Lines are
terminated by CRLF.

In order to allow the server to export netnews spool directories,
there is a per-folder netnews compatability mode.  Folders in this
mode have message files named without an appended period.  Lines in
message files are terminated by just LF.  Messages may not be appended
to or copied into these folders in the normal manner.

The directory contains the following additional files.  All binary
values are in network byte order:

cyrus.header	Contains variable-length information about the folder itself.

- magic-number
- Filename of cyrus.quota for this folder
- The names of the user-defined flags
- The folder's ACL


cyrus.index	Contains a header and a sequence of fixed-length
		records, one record per message in the folder.  The
		header contains:

- magic-number	?
- folder-format	4 bytes		nonzero if folder in netnews format
- generation-no	4 bytes		incremented each time cyrus.index is
				rewritten by an expunge operation
- start-offset	4 bytes		offset of first per-message record
- record-size	4 bytes		size of per-message records
- last-date	4 bytes		INTERNALDATE of the last message
				appended to the folder
- last-seqno	4 bytes		sequence number of the last message
				appended to the folder
- quota-used	4 bytes		size quota usage this folder

		Each per-message record contains:

- sequence-no	4 bytes		internal sequence number
- internaldate	4 bytes		(in unix date format)
- rfc822.size	4 bytes
- body-offset	4 bytes		offset in file of message body
- cache-offset	4 bytes		offset in cyrus.cache
- last-updated	4 bytes		unix date of last modification
				of flags
- system-flags	4 bytes		bit-vector of system and internal flags:
				\answered \flagged \deleted
- user-flags	16 bytes	User-defined flags



cyrus.cache	Contains a header and asequence of variable-length
		records, one record per message in the folder.  The
		header contains a "generation number" corresponding to
		the one in cyrus.index.  Each record contains:

- IMAP "envelope", in format suitable for use in FETCH reply
- IMAP "body", in format suitable for use in FETCH reply
- sizes and file offsets of the various MIME body parts

cyrus.seen	Contains the \seen and \recent information of users.
		One record per user, sorted by user, each record contains:

- Userid
- Time last opened (for \RECENT)
- SEQUENCE of sequence-no's of read messages
- Optional space character padding, to avoid having to rewrite file on updates

In order to support replicated folders in a future implementation,
access to cyrus.seen will be through an interface which can later be
replaced by a distributed database.


* Quota information storage format

Each directory, whether it corresponds to folder or not, can act as
the quota "root" of a hierarchy of folders.  Such roots contain the
file:

cyrus.quota	Contains hierarchy-wide quota limits and usage.


* Folder locking semantics

In order to update information in a folder, the implementation must
follow set locking procedures in order to prevent concurrency errors.

The locking order is: cyrus.header cyrus.index cyrus.seen cyrus.quota
To prevent deadlocks, an implementation may not lock a given file while
holding a lock on a later file.

After obtaining a lock on any file, the implementation must
double-check to make sure the file wasn't rewritten.

The order of the specific update operations is:

To append one or more messages:
	lock cyrus.header
	check ACL
	open cyrus.index and cyrus.cache if not already reading them
	lock already-open cyrus.index file
	if cyrus.index has been replaced since last opened, close,
		reopen, send EXPUNGE notifications, and repeat.
	if reopened cyrus.index file, reopen cyrus.cache file.
	Lock appropriate cyrus.quota
	check quota
	assign sequence number as one plus last-seqno
	ensure new internaldate is later than last-date
	write message file(s)
	append info to cyrus.cache
	append info to cyrus.index
	update last-date, last-seqno, and quota-used
	update cyrus.quota
	release locks

To add or remove flags:
	if adding new user flag, lock cyrus.header, update, release lock
	lock already-open cyrus.index file
	if cyrus.index has been replaced since last opened
		open and lock the newer cyrus.index file.
		locate the record
		read previous flags
	if didn't read previous flags, read them from older cyrus.index
	calculate changes to flags
	update flags and last-updated
	update flags and last-updated in other cyrus.index
	release locks

To expunge:
	lock cyrus.header
	lock appropriate cyrus.quota
	open cyrus.index and cyrus.cache if not already reading them
	lock already-open cyrus.index file
	if cyrus.index has been replaced since last opened, close,
		reopen, send EXPUNGE notifications, and repeat.
	if reopened cyrus.index file, reopen cyrus.cache file.
	create files cyrus.index.NEW and cyrus.cache.NEW
	copy header, incrementing generation-no
	copy non-\DELETED records to new files, remember seqnos and sizes
	[remove unused user flags from cyrus.header?]
	update quota-used in cyrus.index.NEW
	rename cyrus.index.NEW to cyrus.index
	rename cyrus.cache.NEW to cyrus.cache
	update cyrus.quota
	release locks
	remove deleted message files
	lock cyrus.seen
	create cyrus.seen.NEW
	copy data, removing users who haven't read recently
	rename cyrus.seen.NEW to cyrus.seen
	release locks

update recent/seen info:
	lock cyrus.seen
	find record
	if user appears to have read everything and previously hadn't
		check to make sure no new messages
		mark as having read through last-seqno
		dropoff request for IMSP SEEN command
	else if user previously had read everything but no longer does
		dropoff request for IMSP SEEN (0) command
	if enough room to update in place
		update record in place
	else
		create cyrus.seen.NEW
		copy data, updating record
		rename cyrus.seen.NEW to cyrus.seen
	release lock

[need to deal with backout on failure.]

[dump/restore, to implement IMSP MOVE]

* Reading semantics

In order to avoid presenting stale data, the following operations
should be performed when implementing the following IMAP commands.

Select/Bboard:
	open cyrus.header, check ACL
	open cyrus.index and cyrus.cache, repeat if generation-no doesn't match
	open cyrus.seen
	calculate FLAGS from information in cyrus.header
	calculate EXISTS by size of cyrus.index
	calculate RECENT by info in cyrus.seen and binary search of
		cyrus.index 

Fetch/Partial:
	calculate offset into cyrus.index
	follow pointers to cyrus.cache and/or message file

Check:
	if newer cyrus.index
		open cyrus.index and cyrus.cache
		send EXPUNGE notifications
	scan for changed flags (using last-updated), send
		unsolicited FETCH FLAGS replies
	calculate EXISTS and RECENT

Search:
	order the search criterea in cheapest-to-most-expensive order
	perform searches, narrowing return set
	send SEARCH reply

	The search criteria order in the following categoreis:

	- INTERNALDATE based -- binary search in cyrus.index
		ALL, BEFORE, ON, SINCE

	- cyrus.seen based -- binary search seqno, internaldate in cyrus.index
		NEW, OLD, RECENT, SEEN, UNSEEN

	- cyrus.header based
		ANSWERED, DELETED, FLAGGED, KEYWORD,
		UNANSWERED, UNDELETED, UNFLAGGED, UNKEYWORD

	- cyrus.cache based
		BCC, CC, FROM, SUBJECT, TO

	- must serch message file contents
		BODY, TEXT

* Configuration directory

On each server, there is a directory which contains files specifiying
the server configuration.  The files are:

- policy

Specifies site policy options, such as:

	Whether to automatcally create INBOX mailboxes for users
	The hostnames and Kerberos identifications of the IMSP servers
	Whether to support the SUBSCRIBE/UNSUBSCRIBE IMAP commands
	Which Kerberos realms to allow logins from [?]
	Whether to allow logins based on system password file
	Whether to allow anonymous logins

- bboard.partitions

Lists the bboard partition names and their corresponding directory
roots.  If a bboard exists in a given partition, the path to the
bboard is found by taking the bboard name, changing "." characters to
"/", and prepending the partition's directory root.

- mailbox.partitions	[or user.partitions]

Lists the mailbox partition names and their corresponding directory
roots.  If a mailbox exists in a given partition, the path to the
bboard is found by taking the bboard name, changing "." characters to
"/", and prepending the partition's directory root and the mailbox's
user.


When creating a new folder, the default partition is determined as
follows: If there exists a folder or quota root in some higher part of
the hierarchy, the default partition is that of the longest such
folder or quota root.  Otherwise, the default partition is the one
listed first in the appropriate partiton file.

- bboard

Lists the names and partitions of all the bboards.

- delivered.dir & delivered.pag

Database of delivered messages, for duplicate delivery elimination.
Stores folder name (bboard or user/mailbox), message-id, and delivery
time.  The delivery time is used for purging the database of old entries.


* User directory:

There is a directory to contain files with per-user information.
For each user, it contains one or more of the following files.  In the
filename, "USER" stands for the login name of the user.

- USER.mailbox		Lists the names and partitions of the user's mailboxes.

- USER.mailboxsubs	Lists the user's subscribed mailboxes

- USER.bboardsubs	Lists the user's subscribed bboards.


* IMSP dropoff directory:

Contains one file for each SEEN or LAST command that needs to be sent
to an IMSP server.

Filename is one of:

- last.mailbox.USER.MAILBOX-NAME.SEQUENCE-NO
- last.bboard.BBOARD-NAME.SEQUENCE-NO
- seen.mailbox.USER.MAILBOX-NAME.SEQUENCE-NO
- seen.bboard.USER.BBOARD-NAME.SEQUENCE-NO

With the following definitions:

	USER - Name of user owning/reading
	MAILBOX-NAME - Name of relevant mailbox
	BBOARD-NAME - Name of relevant bboard
	SEQUENCE-NO - Sequence-no of last message posted/read
		A sequence-no of "0" for seen means user no longer
		read everything in folder.

The order of operations for the update daemon is:

	list all files in directory
	sort in following order
		last before seen
		larger sequence-no's take precedence, except
			if have a sequence-no of 0, have to stat
			and use the one which was written later
	give IMSP SEEN and LAST commands
	unlink files		
	sleep, repeat


* Reader registry directory

Contains one file for each server process reading a folder.  Filename
is process-id of server, contents of file is name of mailbox/bboard
being read.

When a folder is deleted or renamed, this directory is scanned for
processes reading the folder.  Those processes are sent a signal
causing them to shut down.


* Programs:

The following programs will be written

- cyrus-imapd
	Exports the IMAP protocol to a connecting client.
	Called by inetd or equivalent. 

- cyrus-deliver
	Called by the mail system to deliver message to mailbox or bboard.
	Will be backwards-interface-compatable with rmail.

- cyrus-update
	Daemon to monitor the dropoff directory and give SEEN/LAST
	commands to an IMSP server.

- cyrus-builddir
	Called by the netnews system to build cyrus header files in
	the news spool area.

- cyrus-expire
	Expires old bboard posts
	Has mode where it will clean up after a news system expire

- cyrus-arbitron
	Reports readership statistics

- cyrus-pop2d
- cyrus-pop3d
	Exports the POP2 or POP3 protocol to a connecting client.

- cyrus-reconstruct
	Reconstructs/rebuilds a corrupted set of folder
	header/index/cache/seen files.  Might be the same program as
	cyrus-builddir.


* Monitoring

The following things need to be monitored.

In real time:

- the number of connections
	Can be done with an inetd-equivalent that keeps a count
- disk usage, load average
	Already have programs to do this


In log files:

- where connections come from

- logins

- feature usage (count) and timing (total/min/max)
	Can log on close of folder, with user and folder name


On periodic basis:

- quota usage
	Can write program to walk partitions and read quota roots.


* Implementation priority

Implementation order is as follows:

- append message (ex. cyrus.seen), check quotas, check ACLs

- append cyrus.seen, minimal cyrus-deliver

- bboard/noop/logout, minimal cyrus-imapd

- fetch/partial (ex. MIME parts)

- store flags/recent/seen

- search internaldate/flags

- create/rename/delete

- search cyrus.seen/body

- select/MIME fetch, full-fledged cyrus-deliver

- subscribe/unsubscribe/find/acl

- expunge

- check

- copy, login, etc.  Alpha release

- IMSP seen/last, cyrus-update

- quota

- cyrus-builddir, minimal cyrus-expire

- IMSP move

- quota-usage reporter, full cyrus-expire

- cyrus-arbitron, cyrus-pop2d, cyrus-pop3d

- connection-counting inetd;  Beta release
