# Makefile for cyrus imap server and associated programs
#
# Copyright (c) 1994-2010 Carnegie Mellon University.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# 3. The name "Carnegie Mellon University" must not be used to
#    endorse or promote products derived from this software without
#    prior written permission. For permission or any legal
#    details, please contact
#      Carnegie Mellon University
#      Center for Technology Transfer and Enterprise Creation
#      4615 Forbes Avenue
#      Suite 302
#      Pittsburgh, PA  15213
#      (412) 268-7393, fax: (412) 268-7395
#      innovation@andrew.cmu.edu
#
# 4. Redistributions of any form whatsoever must retain the following
#    acknowledgment:
#    "This product includes software developed by Computing Services
#     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
#
# CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
# THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
# FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

DEFINES=

srcdir = @srcdir@
top_srcdir = @top_srcdir@
top_builddir = @top_builddir@
abs_top_builddir = @abs_top_builddir@
VPATH = @srcdir@

CC = @CC@
RANLIB = @RANLIB@
AWK = @AWK@

CYRUS_USER=@cyrus_user@
CYRUS_GROUP=@cyrus_group@

DEFS = @DEFS@ @LOCALDEFS@
CPPFLAGS = -I@top_srcdir@ -I@top_srcdir@/lib -I@top_srcdir@/imap \
	    @COM_ERR_CPPFLAGS@ @CPPFLAGS@ @SASLFLAGS@
IMAP_LIBS = @LIB_SASL@ @LIBS@ @LIB_RT@ @LIB_UUID@
SIEVE_LIBS = @SIEVE_LIBS@
COM_ERR_LIBS = @COM_ERR_LIBS@
LIB_WRAP = @LIB_WRAP@
LIBS = $(IMAP_LIBS) $(COM_ERR_LIBS) -lcunit

CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@ @COV_LDFLAGS@

SHELL = /bin/sh

#
# Some notes on purify --
#     you probably want to run the make as the cyrus user as 
#     purify sets the cache directory based on the user. So,
#     if you don't, purify can't find the instrumented libraries
#     and so you don't get any useful information.
#     It may also help to run purify by hand to instrument any of
#     the dynamic libraries that may crop up during run time.
# 
VALGRIND_yes = valgrind --tool=memcheck --leak-check=full --suppressions=vg.supp

prefix = @prefix@
exec_prefix = @exec_prefix@
servicedir = @servicedir@

CUNIT = @top_srcdir@/cunit/cunit.pl --project @top_srcdir@/cunit
UNITOBJS = unit.o timeout.o syslog.o

PROGS = unit

TESTSOURCES = \
	annotate.c \
	backend.c \
	binhex.c \
	buf.c \
	charset.c \
	crc32.c \
	db.c \
	dlist.c \
	duplicate.c \
	getxstring.c \
	glob.c \
	guid.c \
	hash.c \
	imapurl.c \
	mboxname.c \
	md5.c \
	message.c \
	msgid.c \
	parseaddr.c \
	parse.c \
	prot.c \
	ptrarray.c \
	quota.c \
	@SIEVE_TESTSOURCES@ \
	spool.c \
	squat.c \
	strarray.c \
	strconcat.c \
	times.c \
	tok.c \


TESTLIBS = @SIEVE_LIBS@ \
	@top_builddir@/imap/mutex_fake.o @top_builddir@/imap/spool.o \
	@top_builddir@/imap/libimap.a @top_builddir@/lib/libcyrus.a \
	@top_builddir@/lib/libcyrus_min.a

BUILTSOURCES = registers.h

all:

pure: unit.pure

install:

.c.o:
	$(CC) -c $(CPPFLAGS) $(DEFS) $(CFLAGS) $<

### Built Source Files

unit.o: registers.h

registers.h: default.cunit
	$(CUNIT) --generate-register-function $@

include cunit.mk
cunit.mk: Makefile
	$(CUNIT) --add-sources $(TESTSOURCES)
	$(CUNIT) --add-libraries $(TESTLIBS)
	$(CUNIT) --generate-makefile $@

###

unit: $(UNITOBJS) $(CUNIT_DEPLIBS)
	$(CC) $(LDFLAGS) -o unit $(UNITOBJS) $(CUNIT_OBJECTS) \
	$(LIBS) $(LIB_WRAP)

### Other Misc Targets

clean::
	rm -f *.o *.a Makefile.bak $(BUILTSOURCES) $(PROGS) $(UNITOBJS) \
	cunit.mk default.cunit *.gcno *.gcda

distclean: clean
	rm -f Makefile

CUFORMAT= basic
UNIT_FLAGS_basic=   -v
UNIT_POST_basic=    :
UNIT_FLAGS_junit=   -x
UNIT_POST_junit=    ./cunit-to-junit.pl

check: unit
	$(VALGRIND_$(VG)) ./unit $(UNIT_FLAGS_$(CUFORMAT))
	$(UNIT_POST_$(CUFORMAT))
