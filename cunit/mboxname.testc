#if HAVE_CONFIG_H
#include <config.h>
#endif
#include "cunit/cunit.h"
#include "libconfig.h"
#include "imap/mboxname.h"
#include "imap/mailbox.h"
#include "imap/global.h"

static void test_dir_hash_c(void)
{
    static const char FRED[] = "fred";
    static const char FRED_DRAFTS[] = "fred.Drafts";
    static const char JANEAT_SENT[] = "bloggs.com!user.jane.Sent";
    static const char SHARED[] = "Gossip";
    static const char INTERNAL[] = "internal!Tattle";
    static const char LONGNAME[] = "thisisareallylongname";
    static const char LONGNAME_SUB[] = "thisisareallylongname.with.a.subdir";
    char c;

    c = dir_hash_c(FRED, 0);
    CU_ASSERT_EQUAL(c, 'f');
    c = dir_hash_c(FRED_DRAFTS, 0);
    CU_ASSERT_EQUAL(c, 'f');
    c = dir_hash_c(JANEAT_SENT, 0);
    CU_ASSERT_EQUAL(c, 'b');
    c = dir_hash_c(SHARED, 0);
    CU_ASSERT_EQUAL(c, 'g');
    c = dir_hash_c(INTERNAL, 0);
    CU_ASSERT_EQUAL(c, 'i');
    c = dir_hash_c(LONGNAME, 0);
    CU_ASSERT_EQUAL(c, 't');
    c = dir_hash_c(LONGNAME_SUB, 0);
    CU_ASSERT_EQUAL(c, 't');

    c = dir_hash_c(FRED, 1);
    CU_ASSERT_EQUAL(c, 'E');
    c = dir_hash_c(FRED_DRAFTS, 1);
    CU_ASSERT_EQUAL(c, 'E');
    c = dir_hash_c(JANEAT_SENT, 1);
    CU_ASSERT_EQUAL(c, 'L');
    c = dir_hash_c(SHARED, 1);
    CU_ASSERT_EQUAL(c, 'K');
    c = dir_hash_c(INTERNAL, 1);
    CU_ASSERT_EQUAL(c, 'I');
    c = dir_hash_c(LONGNAME, 1);
    CU_ASSERT_EQUAL(c, 'J');
    c = dir_hash_c(LONGNAME_SUB, 1);
    CU_ASSERT_EQUAL(c, 'J');
}

static void test_mboxname_to_parts_user(void)
{
    static const char USER[] = "user.john";
    static const char USER_SUB[] = "user.john.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(USER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(USER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_duser(void)
{
    static const char DUSER[] = "example.org!user.john";
    static const char DUSER_SUB[] = "example.org!user.john.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(DUSER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(DUSER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_suser(void)
{
    static const char SUSER[] = "user.john^doe";
    static const char SUSER_SUB[] = "user.john^doe.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(SUSER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(SUSER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_sduser(void)
{
    static const char SDUSER[] = "example.org!user.john^doe";
    static const char SDUSER_SUB[] = "example.org!user.john^doe.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(SDUSER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(SDUSER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_xuser(void)
{
    static const char XUSER[] = "DELETED.user.john";
    static const char XUSER_SUB[] = "DELETED.user.john.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(XUSER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(XUSER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_sxuser(void)
{
    static const char SXUSER[] = "DELETED.user.john^doe";
    static const char SXUSER_SUB[] = "DELETED.user.john^doe.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(SXUSER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(SXUSER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_dxuser(void)
{
    static const char DXUSER[] = "example.org!DELETED.user.john";
    static const char DXUSER_SUB[] = "example.org!DELETED.user.john.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(DXUSER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(DXUSER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_dsxuser(void)
{
    static const char DSXUSER[] = "example.org!DELETED.user.john^doe";
    static const char DSXUSER_SUB[] = "example.org!DELETED.user.john^doe.sub";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(DSXUSER, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_PTR_NULL(parts.box);
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(DSXUSER_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_STRING_EQUAL(parts.userid, "john^doe");
    CU_ASSERT_STRING_EQUAL(parts.box, "sub");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_shared(void)
{
    static const char SHARED[] = "shared.foo";
    static const char SHARED_SUB[] = "shared.foo.bar";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(SHARED, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_PTR_NULL(parts.userid);
    CU_ASSERT_STRING_EQUAL(parts.box, "shared.foo");
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(SHARED_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_PTR_NULL(parts.domain);
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_PTR_NULL(parts.userid);
    CU_ASSERT_STRING_EQUAL(parts.box, "shared.foo.bar");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_dshared(void)
{
    static const char DSHARED[] = "example.org!shared.foo";
    static const char DSHARED_SUB[] = "example.org!shared.foo.bar";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(DSHARED, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_PTR_NULL(parts.userid);
    CU_ASSERT_STRING_EQUAL(parts.box, "shared.foo");
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(DSHARED_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 0);
    CU_ASSERT_PTR_NULL(parts.userid);
    CU_ASSERT_STRING_EQUAL(parts.box, "shared.foo.bar");
    mboxname_free_parts(&parts);
}

static void test_mboxname_to_parts_dxshared(void)
{
    static const char DXSHARED[] = "example.org!DELETED.shared.foo";
    static const char DXSHARED_SUB[] = "example.org!DELETED.shared.foo.bar";

    struct mboxname_parts parts;
    int r;

    r = mboxname_to_parts(DXSHARED, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_PTR_NULL(parts.userid);
    CU_ASSERT_STRING_EQUAL(parts.box, "shared.foo");
    mboxname_free_parts(&parts);

    r = mboxname_to_parts(DXSHARED_SUB, &parts);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_STRING_EQUAL(parts.domain, "example.org");
    CU_ASSERT_EQUAL(parts.is_deleted, 1);
    CU_ASSERT_PTR_NULL(parts.userid);
    CU_ASSERT_STRING_EQUAL(parts.box, "shared.foo.bar");
    mboxname_free_parts(&parts);
}

static void test_to_userid(void)
{
    static const char SAM_DRAFTS[] = "user.sam.Drafts";
    static const char BETTYAT_SENT[] = "boop.com!user.betty.Sent";
    static const char SHARED[] = "shared.Gossip";
    static const char SHAREDAT[] = "foonly.com!shared.Tattle";
    const char *r;

    r = mboxname_to_userid(SAM_DRAFTS);
    CU_ASSERT_STRING_EQUAL(r, "sam");

    r = mboxname_to_userid(BETTYAT_SENT);
    CU_ASSERT_STRING_EQUAL(r, "betty@boop.com");

    r = mboxname_to_userid(SHARED);
    CU_ASSERT_PTR_NULL(r);

    r = mboxname_to_userid(SHAREDAT);
    CU_ASSERT_PTR_NULL(r);
}

static void test_to_usermbox(void)
{
    char *r;

    r = mboxname_user_mbox(NULL, NULL);
    CU_ASSERT_PTR_NULL(r);

    r = mboxname_user_mbox(NULL, "extra.stuff");
    CU_ASSERT_PTR_NULL(r);

    r = mboxname_user_mbox("sam", NULL);
    CU_ASSERT_STRING_EQUAL(r, "user.sam");
    free(r);

    r = mboxname_user_mbox("betty@boop.com", NULL);
    CU_ASSERT_STRING_EQUAL(r, "boop.com!user.betty");
    free(r);

    r = mboxname_user_mbox("sam", "sub");
    CU_ASSERT_STRING_EQUAL(r, "user.sam.sub");
    free(r);

    r = mboxname_user_mbox("sam", "sub.deep.stuff");
    CU_ASSERT_STRING_EQUAL(r, "user.sam.sub.deep.stuff");
    free(r);

    r = mboxname_user_mbox("betty@boop.com", "sub");
    CU_ASSERT_STRING_EQUAL(r, "boop.com!user.betty.sub");
    free(r);

    r = mboxname_user_mbox("betty@boop.com", "sub.deep.stuff");
    CU_ASSERT_STRING_EQUAL(r, "boop.com!user.betty.sub.deep.stuff");
    free(r);
}


static void test_same_userid(void)
{
    static const char FRED_DRAFTS[] = "user.fred.Drafts";
    static const char FRED_SENT[] = "user.fred.Sent";
    static const char JANE_SENT[] = "user.jane.Sent";

    CU_ASSERT_EQUAL(mboxname_same_userid(FRED_DRAFTS, FRED_SENT), 1);
    CU_ASSERT_EQUAL(mboxname_same_userid(JANE_SENT, FRED_SENT), 0);
}

static void test_same_userid_domain(void)
{
    static const char FREDAT_DRAFTS[] = "bloggs.com!user.fred.Drafts";
    static const char FREDAT_SENT[] = "bloggs.com!user.fred.Sent";
    static const char JANEAT_SENT[] = "bloggs.com!user.jane.Sent";
    static const char JANE_SENT[] = "user.jane.Sent";

    CU_ASSERT_EQUAL(mboxname_same_userid(FREDAT_DRAFTS, FREDAT_SENT), 1);
    CU_ASSERT_EQUAL(mboxname_same_userid(JANEAT_SENT, FREDAT_SENT), 0);
    CU_ASSERT_EQUAL(mboxname_same_userid(JANE_SENT, FREDAT_SENT), 0);
    CU_ASSERT_EQUAL(mboxname_same_userid(JANE_SENT, JANEAT_SENT), 0);
}

static void test_contains(void)
{
    static const char FOO[] = "bloggs.com!user.foo";
    static const char FOOBAR[] = "bloggs.com!user.foobar";
    static const char FOODRAFT[] = "bloggs.com!user.foo.Drafts";
    static const char FOONET[] = "bloggs.net!user.foo";
    static const char FOONONE[] = "user.foo";

    CU_ASSERT_EQUAL(mboxname_is_prefix(FOO, FOOBAR), 0);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOOBAR, FOO), 0);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOO, FOODRAFT), 0);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOODRAFT, FOO), 1);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOOBAR, FOOBAR), 1);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOO, FOONET), 0);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOONET, FOO), 0);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOONONE, FOO), 0);
    CU_ASSERT_EQUAL(mboxname_is_prefix(FOO, FOONONE), 0);
}

static void test_parts_same_userid(void)
{
    static const char FRED_DRAFTS[] = "user.fred.Drafts";
    static const char FRED_SENT[] = "user.fred.Sent";
    static const char JANE_SENT[] = "user.jane.Sent";
    struct mboxname_parts parts1, parts2;
    int r;

    r = mboxname_to_parts(FRED_DRAFTS, &parts1);
    CU_ASSERT_EQUAL(r, 0);
    r = mboxname_to_parts(FRED_SENT, &parts2);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_EQUAL(mboxname_parts_same_userid(&parts1, &parts2), 1);
    mboxname_free_parts(&parts1);
    mboxname_free_parts(&parts2);

    r = mboxname_to_parts(JANE_SENT, &parts1);
    CU_ASSERT_EQUAL(r, 0);
    r = mboxname_to_parts(FRED_SENT, &parts2);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_EQUAL(mboxname_parts_same_userid(&parts1, &parts2), 0);
    mboxname_free_parts(&parts1);
    mboxname_free_parts(&parts2);
}

static void test_parts_same_userid_domain(void)
{
    static const char FREDAT_DRAFTS[] = "bloggs.com!user.fred.Drafts";
    static const char FREDAT_SENT[] = "bloggs.com!user.fred.Sent";
    static const char JANEAT_SENT[] = "bloggs.com!user.jane.Sent";
    static const char JANE_SENT[] = "user.jane.Sent";
    struct mboxname_parts parts1, parts2;
    int r;

    r = mboxname_to_parts(FREDAT_DRAFTS, &parts1);
    CU_ASSERT_EQUAL(r, 0);
    r = mboxname_to_parts(FREDAT_SENT, &parts2);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_EQUAL(mboxname_parts_same_userid(&parts1, &parts2), 1);
    mboxname_free_parts(&parts1);
    mboxname_free_parts(&parts2);

    r = mboxname_to_parts(JANEAT_SENT, &parts1);
    CU_ASSERT_EQUAL(r, 0);
    r = mboxname_to_parts(FREDAT_SENT, &parts2);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_EQUAL(mboxname_parts_same_userid(&parts1, &parts2), 0);
    mboxname_free_parts(&parts1);
    mboxname_free_parts(&parts2);

    r = mboxname_to_parts(JANE_SENT, &parts1);
    CU_ASSERT_EQUAL(r, 0);
    r = mboxname_to_parts(FREDAT_SENT, &parts2);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_EQUAL(mboxname_parts_same_userid(&parts1, &parts2), 0);
    mboxname_free_parts(&parts1);
    mboxname_free_parts(&parts2);

    r = mboxname_to_parts(JANE_SENT, &parts1);
    CU_ASSERT_EQUAL(r, 0);
    r = mboxname_to_parts(JANEAT_SENT, &parts2);
    CU_ASSERT_EQUAL(r, 0);
    CU_ASSERT_EQUAL(mboxname_parts_same_userid(&parts1, &parts2), 0);
    mboxname_free_parts(&parts1);
    mboxname_free_parts(&parts2);
}

/* This structure encapsulates all the variables which affect
 * namespace translation in one place */
static struct
{
    const char *userid;
    int isadmin;
    int altnamespace;
    int virtdomains;
    const char *defdomain;
    const char *userprefix;
    const char *sharedprefix;
    int unixhierarchysep;
} conf;

static void toexternal_helper(const char *intname,
			      const char *extname_expected)
{
    struct namespace ns;
    char extname[MAX_MAILBOX_NAME];
    int r;

    config_virtdomains = conf.virtdomains;
    config_defdomain = conf.defdomain;
    imapopts[IMAPOPT_UNIXHIERARCHYSEP].val.b = conf.unixhierarchysep;
    imapopts[IMAPOPT_ALTNAMESPACE].val.b = conf.altnamespace;
    imapopts[IMAPOPT_USERPREFIX].val.s = conf.userprefix;
    imapopts[IMAPOPT_SHAREDPREFIX].val.s = conf.sharedprefix;

    r = mboxname_init_namespace(&ns, conf.isadmin);
    CU_ASSERT_EQUAL_FATAL(r, 0);

    memset(extname, 0x45, sizeof(extname));
    r = ns.mboxname_toexternal(&ns, intname, conf.userid, extname);
    CU_ASSERT_EQUAL_FATAL(r, 0);
    CU_ASSERT_STRING_EQUAL(extname, extname_expected);
}

static void test_toexternal_simple(void)
{
    memset(&conf, 0, sizeof(conf));
    conf.virtdomains = 0;
    conf.userid = "fred";

    toexternal_helper("user.fred", "INBOX");
    toexternal_helper("user.fred.foo", "INBOX.foo");
    toexternal_helper("user.fred.foo.barracuda", "INBOX.foo.barracuda");
    toexternal_helper("user.jane", "user.jane");
    toexternal_helper("user.jane.baz", "user.jane.baz");
    toexternal_helper("shared.quux", "shared.quux");
}

static void test_toexternal_domains(void)
{
    memset(&conf, 0, sizeof(conf));
    conf.virtdomains = 1;
    conf.userid = "fred@bloggs.com";

    toexternal_helper("bloggs.com!user.fred", "INBOX");
    toexternal_helper("bloggs.com!user.fred.foo", "INBOX.foo");
    toexternal_helper("bloggs.com!user.fred.foo.barracuda", "INBOX.foo.barracuda");
    toexternal_helper("bloggs.com!user.jane", "user.jane");
    toexternal_helper("bloggs.com!user.jane.baz", "user.jane.baz");
    toexternal_helper("boop.com!user.betty", "user.betty@boop.com");
    toexternal_helper("bloggs.com!shared.quux", "shared.quux");
    toexternal_helper("boop.com!shared.quux", "shared.quux@boop.com");
}

static void test_toexternal_unixhier(void)
{
    memset(&conf, 0, sizeof(conf));
    conf.unixhierarchysep = 1;
    conf.userid = "fred";

    toexternal_helper("user.fred", "INBOX");
    toexternal_helper("user.fred.foo", "INBOX/foo");
    toexternal_helper("user.fred.foo.barracuda", "INBOX/foo/barracuda");
    toexternal_helper("user.jane", "user/jane");
    toexternal_helper("user.jane.baz", "user/jane/baz");
    toexternal_helper("shared.quux", "shared/quux");
}

static void test_toexternal_alt(void)
{
    memset(&conf, 0, sizeof(conf));
    conf.altnamespace = 1;
    conf.userprefix = "Uvvers";
    conf.sharedprefix = "Chaired";
    conf.userid = "fred";

    toexternal_helper("user.fred", "INBOX");
    toexternal_helper("user.fred.foo", "foo");
    toexternal_helper("user.fred.foo.barracuda", "foo.barracuda");
    toexternal_helper("user.jane", "Uvvers.jane");
    toexternal_helper("user.jane.baz", "Uvvers.jane.baz");
    toexternal_helper("shared.quux", "Chaired.shared.quux");

    conf.virtdomains = IMAP_ENUM_VIRTDOMAINS_ON;
    toexternal_helper("example.org!shared.quux", "Chaired.shared.quux@example.org");
    conf.userid = "john@example.org";
    toexternal_helper("example.org!shared.quux", "Chaired.shared.quux");
    conf.isadmin = 1;
    toexternal_helper("example.org!shared.quux", "shared.quux");

}

static void test_altnamespace_unixhierarchysep(void)
{
    memset(&conf, 0, sizeof(conf));
    conf.altnamespace = 1;
    conf.unixhierarchysep = 1;
    conf.userprefix = "Other Users";
    conf.sharedprefix = "Shared Folders";
    conf.isadmin = 1;

    toexternal_helper("user.fred", "user/fred");
    toexternal_helper("user.fred.foo", "user/fred/foo");
    toexternal_helper("user.fred.foo.barracuda", "user/fred/foo/barracuda");

    conf.isadmin = 0;
    conf.userid = "fred";

    toexternal_helper("user.jane", "Other Users/jane");
    toexternal_helper("user.jane.baz", "Other Users/jane/baz");
    toexternal_helper("shared.quux", "Shared Folders/shared/quux");

    conf.virtdomains = IMAP_ENUM_VIRTDOMAINS_ON;
    conf.userid = "fred@example.org";
    toexternal_helper("example.org!shared.quux", "Shared Folders/shared/quux");

    conf.isadmin = 1;
    toexternal_helper("example.org!shared.quux", "shared/quux");

    conf.userid = "cyrus-admin";
    toexternal_helper("example.org!shared.quux", "shared/quux@example.org");

}


static enum enum_value old_config_virtdomains;

static int set_up(void)
{
    /*
     * TODO: this is pretty hacky.  There should be some
     * cleaner way of pushing aside the config for a moment
     * and temporarily setting up a particular set of config
     * options for testing.
     */
    old_config_virtdomains = config_virtdomains;
    config_virtdomains = IMAP_ENUM_VIRTDOMAINS_ON;
    return 0;
}

static int tear_down(void)
{
    config_virtdomains = old_config_virtdomains;
    return 0;
}

/* vim: set ft=c: */
