# Makefile for cyrus imap server and associated programs
#
# Copyright (c) 1994-2008 Carnegie Mellon University.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# 3. The name "Carnegie Mellon University" must not be used to
#    endorse or promote products derived from this software without
#    prior written permission. For permission or any legal
#    details, please contact
#      Carnegie Mellon University
#      Center for Technology Transfer and Enterprise Creation
#      4615 Forbes Avenue
#      Suite 302
#      Pittsburgh, PA  15213
#      (412) 268-7393, fax: (412) 268-7395
#      innovation@andrew.cmu.edu
#
# 4. Redistributions of any form whatsoever must retain the following
#    acknowledgment:
#    "This product includes software developed by Computing Services
#     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
#
# CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
# THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
# FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

DEFINES=-DSETPROCTITLE

# \Seen state database.  Either 'db' (berkeley db) or 
# 'local' (legacy flat file).
SEEN=seen_db.o

srcdir = @srcdir@
top_srcdir = @top_srcdir@
top_builddir = @top_builddir@
VPATH = @srcdir@

CC = @CC@
INSTALL = @INSTALL@
RANLIB = @RANLIB@
AWK = @AWK@

CYRUS_USER=@cyrus_user@
CYRUS_GROUP=@cyrus_group@

DEFS = @DEFS@ @LOCALDEFS@
CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/lib -I$(top_builddir) -I$(top_builddir)/lib @COM_ERR_CPPFLAGS@ @CPPFLAGS@ @SASLFLAGS@
IMAP_LIBS = @IMAP_LIBS@ @LIB_RT@ @LIB_UUID@
SIEVE_OBJS = @SIEVE_OBJS@
SIEVE_LIBS = @SIEVE_LIBS@
LIB_WRAP = @LIB_WRAP@
LIBS = $(IMAP_LIBS) @COM_ERR_LIBS@
DEPLIBS = $(top_builddir)/lib/libcyrus.a $(top_builddir)/lib/libcyrus_min.a @DEPLIBS@

CFLAGS = @CFLAGS@ $(EXTRACFLAGS)
LDFLAGS = @LDFLAGS@ @COM_ERR_LDFLAGS@ $(EXTRALDFLAGS)

SHELL = /bin/sh
MAKEDEPEND = @MAKEDEPEND@

COMPILE_ET=@COMPILE_ET@

#
# Some notes on purify --
#     you probably want to run the make as the cyrus user as 
#     purify sets the cache directory based on the user. So,
#     if you don't, purify can't find the instrumented libraries
#     and so you don't get any useful information.
#     It may also help to run purify by hand to instrument any of
#     the dynamic libraries that may crop up during run time.
# 
PURIFY=/usr/local/bin/purify
PUREOPT= -best-effort -logfile=/tmp/pure/%v.%p.log -always_use_cache_dir -cachedir=/usr/tmp/$(USER)
QUANTIFY=/usr/local/bin/quantify
QUANTOPT=-windows=no -filename-prefix=/tmp/quant/%v.%p -write-summary-file= -logfile=/tmp/quant/%v.%p.log

prefix = @prefix@
exec_prefix = @exec_prefix@
cyrus_prefix = @cyrus_prefix@
servicedir = @servicedir@

LOBJS= annotate.o append.o backend.o convert_code.o dlist.o duplicate.o \
	global.o idle.o idlemsg.o imapparse.o imap_err.o mailbox.o mbdump.o \
	mboxkey.o mboxlist.o mboxname.o message_guid.o mupdate-client.o \
	mupdate_err.o message.o notify.o proc.o quota_db.o rfc822_header.o \
	setproctitle.o saslclient.o saslserver.o search_engines.o sequence.o \
	squat.o squat_internal.o statuscache_db.o sync_log.o telemetry.o \
	tls.o upgrade_index.o user.o userdeny_db.o version.o $(SEEN)

IMAPDOBJS=imap_proxy.o imapd.o index.o pushstats.o proxy.o

LMTPOBJS=lmtpengine.o lmtpstats.o spool.o

# Your typical objects for the command line utilities
CLIOBJS=cli_fatal.o mutex_fake.o

SERVICE=$(top_builddir)/master/service.o
SERVICETHREAD=$(top_builddir)/master/service-thread.o

PROGS = arbitron chk_cyrus ctl_cyrusdb ctl_deliver ctl_mboxlist cvt_cyrusdb \
	cyr_df cyrdump cyr_dbtool cyr_expire cyr_info cyr_sequence \
	cyr_synclog cyr_userseen deliver fud imapd ipurge lmtpd mbexamine \
	mbpath mbtool pop3d quota reconstruct smmapd squatter unexpunge \
	@IMAP_PROGS@

BUILTSOURCES = imap_err.c imap_err.h lmtpstats.c lmtpstats.h \
	mupdate_err.c mupdate_err.h nntp_err.c nntp_err.h \
	pushstats.c pushstats.h

all: $(BUILTSOURCES) $(PROGS) $(SUIDPROGS)

pure: imapd.pure lmtpd.pure mupdate.pure


install:
	$(INSTALL) -d ${DESTDIR}$(servicedir)
	for file in $(PROGS); \
	do \
		$(INSTALL) -m 755 $$file $(DESTDIR)$(servicedir) || exit 1; \
	done
	ln -f $(DESTDIR)$(servicedir)/pop3d $(DESTDIR)$(servicedir)/pop3proxyd
	ln -f $(DESTDIR)$(servicedir)/imapd $(DESTDIR)$(servicedir)/proxyd
	ln -f $(DESTDIR)$(servicedir)/lmtpd $(DESTDIR)$(servicedir)/lmtpproxyd

.SUFFIXES: .snmp

.c.o:
	$(CC) -c $(CPPFLAGS) $(DEFS) $(CFLAGS) $<

.snmp.c:
	$(top_srcdir)/snmp/snmpgen $<

### libimap

libimap.a: $(LOBJS)
	rm -f $@
	ar cr $@ $(LOBJS)
	$(RANLIB) $@

### Built Source Files

version.o: ../xversion.h

pushstats.h: pushstats.c

lmtpstats.h: lmtpstats.c

imap_err.c imap_err.h: imap_err.et
	$(COMPILE_ET) $(srcdir)/imap_err.et

annotate.o append.o arbitron.o convert_code.o: imap_err.h
ctl_mboxlist.o cvt_cyrusdb.o: imap_err.h
cyr_dbtool.o cyrdump.o cyr_sequence.o deliver.o dlist.o: imap_err.h
duplicate.o fud.o global.o imapd.o imap_proxy.o index.o: imap_err.h
ipurge.o lmtpd.o lmtpengine.o lmtp_sieve.o mailbox.o mbdump.o: imap_err.h
mbexamine.o mboxkey.o mboxlist.o mboxname.o mbpath.o message.o: imap_err.h
mupdate.o nntpd.o pop3d.o proxy.o quota.o quota_db.o: imap_err.h
reconstruct.o saslclient.o saslserver.o seen_db.o smmapd.o: imap_err.h
smtpclient.o spool.o squatter.o statuscache_db.o sync_client.o: imap_err.h
sync_reset.o sync_server.o sync_support.o unexpunge.o: imap_err.h
upgrade_index.o user.o: imap_err.h

nntp_err.c nntp_err.h: nntp_err.et
	$(COMPILE_ET) $(srcdir)/nntp_err.et

nntpd.o spool.o: nntp_err.h

mupdate_err.c mupdate_err.h: mupdate_err.et
	$(COMPILE_ET) $(srcdir)/mupdate_err.et

ctl_mboxlist.o global.o lmtpd.o lmtpengine.o: mupdate_err.h
mupdate-client.o mupdate.o mupdate-slave.o: mupdate_err.h

@MAINT@rfc822_header.c: rfc822_header.st
@MAINT@	@top_srcdir@/tools/compile_st.pl -c rfc822_header.st > $@.NEW && mv $@.NEW $@

@MAINT@rfc822_header.h: rfc822_header.st
@MAINT@	@top_srcdir@/tools/compile_st.pl -h rfc822_header.st > $@.NEW && mv $@.NEW $@

@MAINT@rfc822_header.o: rfc822_header.h

### Services
fud: fud.o mutex_fake.o libimap.a $(DEPLIBS) $(SERVICE)
	$(CC) $(LDFLAGS) -o $@ fud.o mutex_fake.o libimap.a $(DEPLIBS) \
	$(LIBS) $(LIB_WRAP) $(SERVICE) 

idled: idled.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 idled.o mutex_fake.o libimap.a $(DEPLIBS) $(LIBS)

imapd: mutex_fake.o libimap.a $(DEPLIBS) $(IMAPDOBJS) $(SERVICE)
	$(CC) $(LDFLAGS) -o $@ mutex_fake.o $(SERVICE) \
	 $(IMAPDOBJS) libimap.a $(DEPLIBS) $(LIBS) $(LIB_WRAP)

imapd.pure: mutex_fake.o libimap.a $(DEPLIBS) $(IMAPDOBJS) $(SERVICE)
	$(PURIFY) $(PUREOPT) $(CC) $(LDFLAGS) -o $@ mutex_fake.o $(SERVICE) \
	$(IMAPDOBJS) libimap.a $(DEPLIBS)  $(LIBS) $(LIB_WRAP)

imapd.quant: mutex_fake.o libimap.a $(IMAPDOBJS) $(DEPLIBS) $(SERVICE)
	$(QUANTIFY) $(QUANTOPT) $(CC) $(LDFLAGS) -o $@ \
	 mutex_fake.o $(SERVICE) $(IMAPDOBJS) libimap.a $(DEPLIBS) $(LIBS) $(LIB_WRAP) 

lmtpd: lmtpd.o mutex_fake.o proxy.o libimap.a $(DEPLIBS) $(LMTPOBJS) \
	$(SERVICE) $(SIEVE_LIBS) $(SIEVE_OBJS) 
	$(CC) $(LDFLAGS) -o $@ \
	 lmtpd.o mutex_fake.o proxy.o $(LMTPOBJS) $(SERVICE) $(SIEVE_OBJS) \
	 $(SIEVE_LIBS) libimap.a $(DEPLIBS) $(LIBS) $(LIB_WRAP)

lmtpd.pure: lmtpd.o mutex_fake.o proxy.o libimap.a $(DEPLIBS) $(LMTPOBJS) \
	  $(SERVICE) $(SIEVE_LIBS) $(SIEVE_OBJS)
	$(PURIFY) $(PUREOPT) $(CC) $(LDFLAGS) -o $@ \
	 lmtpd.o mutex_fake.o proxy.o $(LMTPOBJS) $(SERVICE) $(SIEVE_OBJS) \
	 $(SIEVE_LIBS) libimap.a $(DEPLIBS) $(LIBS) $(LIB_WRAP)

mupdate: mupdate.o mupdate-slave.o mutex_pthread.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 $(SERVICETHREAD) mupdate.o mupdate-slave.o mutex_pthread.o libimap.a \
	 $(DEPLIBS) $(LIBS) $(LIB_WRAP) -lpthread

mupdate.pure: mupdate.o mupdate-slave.o mutex_pthread.o libimap.a $(DEPLIBS)
	$(PURIFY) $(PUREOPT) $(CC) $(LDFLAGS) -o $@ \
	 $(SERVICETHREAD) mupdate.o mupdate-slave.o mutex_pthread.o libimap.a \
	 $(DEPLIBS) $(LIBS) $(LIB_WRAP) -lpthread

nntpd: index.o mutex_fake.o nntpd.o nntp_err.o proxy.o smtpclient.o spool.o \
	libimap.a $(DEPLIBS) $(SERVICE)
	$(CC) $(LDFLAGS) -o $@ \
	 index.o mutex_fake.o nntpd.o nntp_err.o proxy.o smtpclient.o spool.o \
	 libimap.a $(DEPLIBS) $(LIBS) $(LIB_WRAP) $(SERVICE)

pop3d: mutex_fake.o pop3d.o proxy.o libimap.a $(DEPLIBS) $(SERVICE)
	$(CC) $(LDFLAGS) -o $@ mutex_fake.o pop3d.o proxy.o libimap.a \
	$(DEPLIBS) $(LIBS) $(LIB_WRAP) $(SERVICE)

smmapd: mutex_fake.o smmapd.o libimap.a $(DEPLIBS) $(SERVICE)
	$(CC) $(LDFLAGS) -o $@ mutex_fake.o smmapd.o libimap.a \
	$(DEPLIBS) $(LIBS) $(LIB_WRAP) $(SERVICE)

sync_server: mutex_fake.o sync_server.o sync_support.o libimap.a $(DEPLIBS) \
	$(SERVICE)
	$(CC) $(LDFLAGS) -o $@ \
	mutex_fake.o sync_server.o sync_support.o libimap.a $(DEPLIBS) \
	$(LIBS) $(LIB_WRAP) $(SERVICE)

### Command Line Utilities
arbitron: arbitron.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	arbitron.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

chk_cyrus: chk_cyrus.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 chk_cyrus.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

ctl_cyrusdb: ctl_cyrusdb.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 ctl_cyrusdb.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

ctl_deliver: ctl_deliver.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 ctl_deliver.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

ctl_mboxlist: ctl_mboxlist.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 ctl_mboxlist.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cvt_cyrusdb: cvt_cyrusdb.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 cvt_cyrusdb.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyrdump: cyrdump.o index.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 cyrdump.o index.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyr_dbtool: cyr_dbtool.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 cyr_dbtool.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyr_df: cyr_df.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ cyr_df.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyr_expire: cyr_expire.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 cyr_expire.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyr_info: cyr_info.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ cyr_info.o $(CLIOBJS) \
	$(top_builddir)/master/masterconf.o libimap.a $(DEPLIBS) $(LIBS)

cyr_sequence: cyr_sequence.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 cyr_sequence.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyr_synclog: cyr_synclog.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 cyr_synclog.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyr_userseen: cyr_userseen.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 cyr_userseen.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

cyr_virusscan: cyr_virusscan.o index.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ cyr_virusscan.o index.o $(CLIOBJS) \
	libimap.a $(DEPLIBS) $(LIBS) -lclamav

deliver: deliver.o $(LMTPOBJS) mutex_fake.o proxy.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ deliver.o \
	 mutex_fake.o proxy.o $(LMTPOBJS) libimap.a $(DEPLIBS) $(LIBS)

fetchnews: fetchnews.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 fetchnews.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

ipurge: ipurge.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ ipurge.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

mbexamine: mbexamine.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 mbexamine.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

mbpath: mbpath.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ mbpath.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

mbtool: mbtool.o mutex_fake.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ mbtool.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

quota: quota.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ quota.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

reconstruct: reconstruct.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 reconstruct.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

squatter: index.o squatter.o squat_build.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ index.o \
	squatter.o squat_build.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

sync_client: mutex_fake.o sync_client.o sync_support.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	mutex_fake.o sync_client.o sync_support.o libimap.a $(DEPLIBS) $(LIBS)

sync_reset: mutex_fake.o sync_reset.o sync_support.o libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	sync_reset.o sync_support.o libimap.a mutex_fake.o $(DEPLIBS) $(LIBS)

tls_prune: tls_prune.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ \
	 tls_prune.o $(CLIOBJS) libimap.a $(DEPLIBS) $(LIBS)

unexpunge: unexpunge.o $(CLIOBJS) libimap.a $(DEPLIBS)
	$(CC) $(LDFLAGS) -o $@ unexpunge.o $(CLIOBJS) \
	libimap.a $(DEPLIBS) $(LIBS)

### Other Misc Targets

clean:
	rm -f *.o *.a Makefile.bak makedepend.log \
	$(BUILTSOURCES) $(PROGS) $(SUIDPROGS) cyr_virusscan *.gcno *.gcda

distclean: clean
	rm -f Makefile

check:

depend: imap_err.h
	${MAKEDEPEND} $(CPPFLAGS) $(DEFS) $(CFLAGS) *.c $(srcdir)/*.c 1>makedepend.log 2>&1

# DO NOT DELETE THIS LINE -- make depend depends on it.
