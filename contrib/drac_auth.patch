$Id: drac_auth.patch,v 1.7 2001/06/01 19:26:16 ken3 Exp $

Patch to add support for Dynamic Relay Authorization Control

For more information about DRAC, see:
	http://mail.cc.umanitoba.ca/drac/index.html


Installation
------------

1.  Apply this patch in the toplevel directory using the following command:

	# patch -b -p0 < contrib/drac_auth.patch

2.  Cleanup any previous builds:

	# make distclean

3a. If you DO NOT have 'smake' and 'autoconf' installed on your system, goto
    step 3b.

    Perform the following to reconfigure your build:

	# rm aclocal.m4 configure
	# sh SMakefile
	# ./configure ... --with-drac=<location of libdrac>

    NOTE: you can find your original configure command in config.status

    Proceed to step 4.

3b. Edit imap/Makefile and modify the following three variables:

	DEFS = ... -DDRAC_AUTH
	LIBS = ... -ldrac
	LDFLAGS = ... -L<location of libdrac>

4.  Build and install the software:

	# make
	# make install

5.  If dracd is not running on the same system as Cyrus (localhost),
    use the 'drachost' option in imapd.conf(5) to specify the hostname of
    the dracd server.

6.  Installation is complete!


Operation
---------

The behavior of DRAC is controlled by the value of the 'dracinterval' option
in imapd.conf(5).  If 'dracinterval' is 0 (zero), DRAC support is disabled.
Otherwise, DRAC support is enabled and has the following behavior:

pop3d: Whenever a client opens a user's INBOX, drac_auth() is called.

imapd: Once a client is logged in (via LOGIN or AUTHENTICATE),
       drac_send() will be once called every 'dracinterval' minutes.





Index: acconfig.h
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/acconfig.h,v
retrieving revision 1.17
diff -c -r1.17 acconfig.h
*** acconfig.h	2001/03/28 16:11:49	1.17
--- acconfig.h	2001/06/01 19:14:46
***************
*** 81,86 ****
--- 81,89 ----
  /* do we have SASL support for APOP? */
  #undef HAVE_APOP
  
+ /* the Dynamic Relay Authorization Control package */
+ #undef DRAC_AUTH
+ 
  /* do we have OpenSSL? */
  #undef HAVE_SSL
  
Index: configure.in
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/configure.in,v
retrieving revision 1.197
diff -c -r1.197 configure.in
*** configure.in	2001/05/17 17:33:29	1.197
--- configure.in	2001/06/01 19:14:46
***************
*** 730,735 ****
--- 730,750 ----
  SNMP_SUBDIRS=""
  AC_SUBST(SNMP_SUBDIRS)
  
+ 
+ 
+ dnl
+ dnl Test for DRAC
+ dnl
+ AC_ARG_WITH(drac, [  --with-drac=DIR         use DRAC library in <DIR> [no] ],
+ 	if test -d "$withval"; then
+ 		LDFLAGS="$LDFLAGS -L${withval}"
+ 		AC_CHECK_LIB(drac, dracauth,
+ 			AC_DEFINE(DRAC_AUTH)
+ 			LIBS="${LIBS} -ldrac")
+ 	fi)
+ 
+ 
+ 
  CMU_SOCKETS
  CMU_LIBWRAP
  CMU_UCDSNMP
Index: imap/imapd.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/imapd.c,v
retrieving revision 1.307
diff -c -r1.307 imapd.c
*** imap/imapd.c	2001/05/21 18:27:10	1.307
--- imap/imapd.c	2001/06/01 19:14:50
***************
*** 117,122 ****
--- 117,127 ----
  static SSL *tls_conn = NULL;
  #endif /* HAVE_SSL */
  
+ #ifdef DRAC_AUTH
+ static int drac_interval; /* dracd "ping" interval; 0 = disabled */
+ static unsigned long drac_clientip;
+ #endif /* DRAC_AUTH */
+ 
  /* current sub-user state */
  static struct mailbox mboxstruct;
  static struct mailbox *imapd_mailbox;
***************
*** 436,441 ****
--- 441,462 ----
      /* setup for sending IMAP IDLE notifications */
      idle_enabled();
  
+ #ifdef DRAC_AUTH
+     /* setup for sending DRAC "pings" */
+     drac_interval = config_getint("dracinterval", 5);
+     if (drac_interval < 0) drac_interval = 0;
+ 
+     if (drac_interval) {
+ 	char *err;
+ 
+ 	if (dracconn(config_getstring("drachost", "localhost"), &err) != 0) {
+ 	    /* disable DRAC */
+ 	    drac_interval = 0;
+ 	    syslog(LOG_NOTICE, "dracconn: %s (DISABLED)", err);
+ 	}
+     }
+ #endif /* DRAC_AUTH */
+ 
      /* create connection to the SNMP listener, if available. */
      snmp_connect(); /* ignore return code */
      snmp_set_str(SERVER_NAME_VERSION,CYRUS_VERSION);
***************
*** 508,513 ****
--- 529,540 ----
  	if (getsockname(0, (struct sockaddr *)&imapd_localaddr, &salen) == 0) {
  	    imapd_haveaddr = 1;
  	}
+ 
+ #ifdef DRAC_AUTH
+ 	drac_clientip = imapd_remoteaddr.sin_addr.s_addr;
+     } else {
+ 	drac_clientip = 0;
+ #endif /* DRAC_AUTH */
      }
  
      /* create the SASL connection */
***************
*** 620,625 ****
--- 647,657 ----
      prot_flush(imapd_out);
      /* one less active connection */
      snmp_increment(ACTIVE_CONNECTIONS, -1);
+ 
+ #ifdef DRAC_AUTH
+     if (drac_interval) (void) dracdisc((char **)NULL);
+ #endif /* DRAC_AUTH */
+ 
      exit(code);
  }
  
***************
*** 640,646 ****
--- 672,700 ----
  
  }
  
+ #ifdef DRAC_AUTH
  /*
+  * Ping dracd every 'drac_interval' minutes
+  * to let it know that we are still connected
+  */
+ struct prot_waitevent *drac_ping(struct protstream *s,
+ 				 struct prot_waitevent *ev, void *rock)
+ {
+     char *err;
+ 
+     if (dracsend(drac_clientip, &err) != 0) {
+ 	/* disable DRAC */
+ 	prot_removewaitevent(s, ev);
+ 	syslog(LOG_NOTICE, "dracsend: %s (DISABLED)", err);
+ 	return NULL;
+     }
+ 
+     ev->mark = time(NULL) + (drac_interval * 60);
+     return ev;
+ }
+ #endif /* DRAC_AUTH */
+ 
+ /*
   * Top-level command loop parsing
   */
  void
***************
*** 653,658 ****
--- 707,715 ----
      static struct buf tag, cmd, arg1, arg2, arg3, arg4;
      char *p;
      const char *err;
+ #ifdef DRAC_AUTH
+     struct prot_waitevent *drac_event;
+ #endif /* DRAC_AUTH */
  
      prot_printf(imapd_out,
  		"* OK %s Cyrus IMAP4 %s server ready\r\n", config_servername,
***************
*** 727,732 ****
--- 784,795 ----
  		cmd_authenticate(tag.s, arg1.s);
  
  		snmp_increment(AUTHENTICATE_COUNT, 1);
+ 
+ #ifdef DRAC_AUTH
+ 		if (imapd_userid && drac_interval && drac_clientip)
+ 		    drac_event = prot_addwaitevent(imapd_in, 0 /* ping now */,
+ 						   drac_ping, NULL);
+ #endif /* DRAC_AUTH */
  	    }
  	    else if (!imapd_userid) goto nologin;
  	    else if (!strcmp(cmd.s, "Append")) {
***************
*** 981,986 ****
--- 1044,1055 ----
  		cmd_login(tag.s, arg1.s, arg2.s);
  
  		snmp_increment(LOGIN_COUNT, 1);
+ 
+ #ifdef DRAC_AUTH
+ 		if (imapd_userid && drac_interval && drac_clientip)
+ 		    drac_event = prot_addwaitevent(imapd_in, 0 /* ping now */,
+ 						   drac_ping, NULL);
+ #endif /* DRAC_AUTH */
  	    }
  	    else if (!strcmp(cmd.s, "Logout")) {
  		if (c == '\r') c = prot_getc(imapd_in);
***************
*** 992,997 ****
--- 1061,1071 ----
  			    error_message(IMAP_BYE_LOGOUT));
  		prot_printf(imapd_out, "%s OK %s\r\n", tag.s, 
  			    error_message(IMAP_OK_COMPLETED));
+ 
+ #ifdef DRAC_AUTH
+ 		prot_removewaitevent(imapd_in, drac_event);
+ #endif /* DRAC_AUTH */
+ 
  		return;
  	    }
  	    else if (!imapd_userid) goto nologin;
Index: imap/pop3d.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/pop3d.c,v
retrieving revision 1.94
diff -c -r1.94 pop3d.c
*** imap/pop3d.c	2001/06/01 02:59:02	1.94
--- imap/pop3d.c	2001/06/01 19:14:50
***************
*** 100,105 ****
--- 100,108 ----
  
  extern int errno;
  
+ #ifdef DRAC_AUTH
+ static int drac_enabled;
+ #endif /* DRAC_AUTH */
  
  
  #ifdef HAVE_SSL
***************
*** 284,289 ****
--- 287,296 ----
         TLS negotiation immediatly */
      if (pop3s == 1) cmd_starttls(1);
  
+ #ifdef DRAC_AUTH
+     drac_enabled = (config_getint("dracinterval", 5) > 0);
+ #endif /* DRAC_AUTH */
+ 
      prot_printf(popd_out, "+OK %s Cyrus POP3 %s server ready\r\n",
  		apop_enabled() ? popd_apop_chal : config_servername,
  		CYRUS_VERSION);
***************
*** 1233,1238 ****
--- 1240,1258 ----
      }
      popd_mailbox = &mboxstruct;
      proc_register("pop3d", popd_clienthost, popd_userid, popd_mailbox->name);
+ 
+ #ifdef DRAC_AUTH
+     if (drac_enabled) {
+ 	char *err;
+ 
+ 	if (dracauth(config_getstring("drachost", "localhost"),
+ 		     popd_remoteaddr.sin_addr.s_addr, &err) != 0) {
+ 	    /* disable DRAC */
+ 	    drac_enabled = 0;
+ 	    syslog(LOG_NOTICE, "dracauth: %s (DISABLED)", err);
+ 	}
+     }
+ #endif /* DRAC_AUTH */
  
      /* Create telemetry log */
      telemetry_log(popd_userid, popd_in, popd_out);
Index: man/imapd.conf.5
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/man/imapd.conf.5,v
retrieving revision 1.41
diff -c -r1.41 imapd.conf.5
*** man/imapd.conf.5	2001/03/07 15:52:59	1.41
--- man/imapd.conf.5	2001/06/01 19:14:51
***************
*** 224,230 ****
  Unix domain socket that lmtpd listens on.
  .IP "\fBidlesocket:\fR /var/imap/socket/idle" 5
  Unix domain socket that idled listens on.
  .SH SEE ALSO
  .PP
  \fBimapd(8)\fR, \fBpop3d(8)\fR, \fBlmtpd(8)\fR, \fBtimsieved(8)\fR,
! \fBidled(8)\fR, \fBdeliver(8)\fR, \fBmaster(8)\fR
--- 224,236 ----
  Unix domain socket that lmtpd listens on.
  .IP "\fBidlesocket:\fR /var/imap/socket/idle" 5
  Unix domain socket that idled listens on.
+ .IP "\fBdracinterval:\fR 5" 5
+ If nonzero, enables the use of DRAC (Dynamic Relay Authorization Control)
+ by the pop3d and imapd daemons.  Also sets the interval (in minutes) between 
+ re-authorization requests made by imapd.
+ .IP "\fBdrachost:\fR localhost" 5
+ Hostname of the dracd server.
  .SH SEE ALSO
  .PP
  \fBimapd(8)\fR, \fBpop3d(8)\fR, \fBlmtpd(8)\fR, \fBtimsieved(8)\fR,
! \fBidled(8)\fR, \fBdeliver(8)\fR, \fBmaster(8)\fR, \fBrpc.dracd(1m)\fR
